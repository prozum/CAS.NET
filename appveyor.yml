environment:
  CoverityProjectToken:
      secure: k5JpbLODWLUCC4wXpzabZz+y3Otvfp8hNuA1BZI1/c0=
  CoverityNotificationEmail:
      secure: SkMoWnYcCR2QVa8COhA8mwLl7sxjWcIbbC0T5nrJLlM=

before_build:
  - nuget restore

build_script:
- ps: |
    $buildCmd = "C:\Program Files (x86)\MSBuild\12.0\bin\msbuild.exe"
    $buildArgs = @(
      "/m",
      "/l:C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll",
      "/p:Configuration=$env:CONFIGURATION",
      "/p:Platform=$env:PLATFORM")
    
    # If build is not a scheduled one, then simply build the project with
    # MSBuild.
    if ($env:APPVEYOR_SCHEDULED_BUILD -ne "True") {
      & $buildCmd $buildArgs
      return
    }
    
    # Else, build project with Coverity Scan.
    "Building project with Coverity..."
    & cov-build.exe --dir cov-int --encoding=UTF-8 $buildCmd $buildArgs
      
    # Compress results.
    $coverityPublisher =
      "third-party\nuget-packages\PublishCoverity.0.9.0\PublishCoverity.exe"
    "Compressing Coverity results..."
    & "$coverityPublisher" compress `
      -i "$env:APPVEYOR_BUILD_FOLDER\cov-int" `
      -o "$env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip" `
      --overwrite
    
    # Upload results to Coverity server.
    $version = "$env:VersionMajor.$env:VersionMinor.$env:VersionPatch" +
      "-$env:VersionStage+$env:VersionBuild"
    "Uploading Coverity results..."  
    & "$coverityPublisher" publish `
      -t "$env:CoverityProjectToken" `
      -e "$env:CoverityNotificationEmail" `
      -r "$env:APPVEYOR_REPO_NAME" `
      -z "$env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip" `
      -d "CI server scheduled build." `
      --codeVersion "$version"

